// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:
    // address[14]までがRAM16Kに対応16383まで　
    // address[15]に値があった場合はKBDかSCREEN
    // address[15]はマックス32768
    // 24576より大きい値は無効
    // SCREENは16384から24575まで
    // KBDは24576
    // if address[15] == 0 then RAM16K 
    // else SCREEN or KBD or 無効
    // if address in 16384..24575 then SCREEN //address[15][14] == 10
    // else KBD or 無効
    // if address == 24576 then KBD // address[15][14] == 11 and address[13..0] == 0
    // else 無効

    DMux4Way(in=load, sel[1]=address[14], sel[0]=address[13], a=ram1, b=ram2, c=screenflag, d=kbd);

    RAM16K(in=in, load=ram1, address=address[0..13], out=ramout1);
    RAM16K(in=in, load=ram2, address=address[0..13], out=ramout2);
    Screen(in=in, load=screenflag, address=address[0..12], out=screenout);
    Keyboard(out=kbdout);
    Mux4Way16(a=ramout1, b=ramout2, c=screenout, d=kbdout, sel[1]=address[14], sel[0]=address[13], out=out);

}